{% extends 'base.html.twig' %}

{# Chargement du layout utilisateur #}
{% set statsOrder = userSettings.statsOrder|default(stats|keys) %}
{% set chartsOrder = userSettings.chartsOrder|default(['statusChart','priorityChart']) %}

{% block body %}
  <div class="container-fluid p-3" style="height: calc(100vh - 56px); overflow-y: auto;">
    <h1 class="mb-4">Tableau de bord</h1>
    {# Stats dans l'ordre sauvegardé #}
    <div id="stats-container" class="row g-3">
      {% for key in statsOrder %}
        {% set count = stats[key] %}
        <div class="col-md-3 draggable-card" draggable="true" data-key="{{ key }}">
          <div class="card shadow-sm" style="height:200px;">
            <div class="card-body d-flex flex-column justify-content-center text-center">
              <h5 class="card-title text-capitalize mb-2">{{ key|replace({'_':' '}) }}</h5>
              <p class="card-text display-4 mb-0">{{ count }}</p>
            </div>
          </div>
        </div>
      {% endfor %}
    </div>

    {% if userSettings.showCharts %}
      {# Charts dans l'ordre sauvegardé #}
      <div id="charts-container" class="row g-3 mt-4">
        {% for key in chartsOrder %}
          {% if key == 'statusChart' %}
            <div class="col-md-6 draggable-card" draggable="true" data-key="statusChart">
              <div class="card shadow-sm" style="height:350px;">
                <div class="card-header">Tickets par statut</div>
                <div class="card-body p-0 d-flex" style="position:relative; height:300px;">
                  <canvas id="statusChart"></canvas>
                </div>
              </div>
            </div>
          {% elseif key == 'priorityChart' %}
            <div class="col-md-6 draggable-card" draggable="true" data-key="priorityChart">
              <div class="card shadow-sm" style="height:350px;">
                <div class="card-header">Tickets par priorité</div>
                <div class="card-body p-0 d-flex" style="position:relative; height:300px;">
                  <canvas id="priorityChart"></canvas>
                </div>
              </div>
            </div>
          {% endif %}
        {% endfor %}
      </div>
    {% endif %}
  </div>
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  {% if userSettings.showCharts %}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
    // API endpoint for saving layout
      const saveLayout = (type, order) => {
        fetch('{{ path('settings_layout') }}', {
          method: 'POST',
          headers: {'Content-Type': 'application/json', 'X-Requested-With':'XMLHttpRequest'},
          body: JSON.stringify({type: type, order: order})
        });
      };

      // Drag & Drop simple for stats and charts
      const makeSortable = (containerId, type) => {
        const container = document.getElementById(containerId);
        let dragged;

        container.addEventListener('dragstart', e => {
          dragged = e.target;
          e.dataTransfer.effectAllowed = 'move';
        });

        container.addEventListener('dragover', e => {
          e.preventDefault();
          e.dataTransfer.dropEffect = 'move';
        });

        container.addEventListener('drop', e => {
          e.preventDefault();
          if (e.target.closest('.draggable-card') && dragged) {
            const dropEl = e.target.closest('.draggable-card');
            const items = Array.from(container.querySelectorAll('.draggable-card'));
            const draggedIndex = items.indexOf(dragged);
            const dropIndex = items.indexOf(dropEl);
            if (draggedIndex < dropIndex) {
              container.insertBefore(dragged, dropEl.nextSibling);
            } else {
              container.insertBefore(dragged, dropEl);
            }
            const newOrder = Array.from(container.querySelectorAll('.draggable-card')).map(el => el.dataset.key);
            saveLayout(type, newOrder);
          }
        });
      };

      // Initial load via AJAX GET to apply saved layout dynamically
      const loadLayout = async (type, containerId) => {
        try {
          const res = await fetch('{{ path('settings_layout') }}', { headers: {'X-Requested-With':'XMLHttpRequest'} });
          if (!res.ok) return;
          const data = await res.json();
          const order = data[type + 'Order'] || [];
          if (order.length) {
            const container = document.getElementById(containerId);
            const elements = {};
            container.querySelectorAll('.draggable-card').forEach(el => elements[el.dataset.key] = el);
            order.forEach(key => {
              if (elements[key]) container.appendChild(elements[key]);
            });
          }
        } catch (e) {
          console.error('Error loading layout', e);
        }
      };

      // Load saved layouts on page load
      document.addEventListener('DOMContentLoaded', () => {
        loadLayout('stats', 'stats-container');
        loadLayout('charts', 'charts-container');
      });

      // Initialize drag & drop interactions
      makeSortable('stats-container', 'stats');
      makeSortable('charts-container', 'charts');

      // Chart initialization (omitted for brevity) …
      const statusData   = {{ stats|json_encode|raw }};
      const priorityData = {{ priorities|json_encode|raw }};
      const barColor     = '{{ userSettings.barColor|default('#0d6efd') }}';
      const pieContrast  = '{{ userSettings.pieContrast|default('high') }}';

      new Chart(document.getElementById('statusChart'), {
        type: 'bar',
        data: {
          labels: Object.keys(statusData),
          datasets: [{
            label: 'Tickets par statut',
            data: Object.values(statusData),
            backgroundColor: barColor,
            borderColor: barColor,
            borderWidth: 1
          }]
        },
        options: { maintainAspectRatio: false }
      });

      const pieBg = pieContrast === 'low'
        ? Object.keys(priorityData).map(priority => {
            switch(priority) {
              case 'basse':    return 'rgba(40, 167, 69, 0.6)';
              case 'normal': return 'rgba(0, 123, 255, 0.6)';
              case 'haute':   return 'rgba(253, 126, 20, 0.6)';
              case 'urgent': return 'rgba(220, 53, 69, 0.6)';
              default:       return 'rgba(108, 117, 125, 0.6)';
            }
          })
        : Object.keys(priorityData).map(priority => {
            switch(priority) {
              case 'basse':    return 'rgba(40, 167, 69, 1)';
              case 'normal': return 'rgba(0, 123, 255, 1)';
              case 'haute':   return 'rgba(253, 126, 20, 1)';
              case 'urgent': return 'rgba(220, 53, 69, 1)';
              default:       return 'rgba(108, 117, 125, 1)';
            }
          });
      const pieBorder = pieContrast === 'low'
        ? Object.keys(priorityData).map(priority => {
            switch(priority) {
              case 'basse':    return 'rgba(40, 167, 69, 0.5)';
              case 'normal': return 'rgba(0, 123, 255, 0.5)';
              case 'haute':   return 'rgba(253, 126, 20, 0.5)';
              case 'urgent': return 'rgba(220, 53, 69, 0.5)';
              default:       return 'rgba(108, 117, 125, 0.5)';
            }
          })
        : Object.keys(priorityData).map(priority => {
            switch(priority) {
              case 'basse':    return 'rgba(40, 167, 69, 1)';
              case 'normal': return 'rgba(0, 123, 255, 1)';
              case 'haute':   return 'rgba(253, 126, 20, 1)';
              case 'urgent': return 'rgba(220, 53, 69, 1)';
              default:       return 'rgba(108, 117, 125, 1)';
            }
          });

      new Chart(document.getElementById('priorityChart'), {
        type: 'pie',
        data: {
          labels: Object.keys(priorityData),
          datasets: [{
            label: 'Tickets par priorité',
            data: Object.values(priorityData),
            backgroundColor: pieBg,
            borderColor: pieBorder,
            borderWidth: 1
          }]
        },
        options: { maintainAspectRatio: false }
      });
    </script>
  {% endif %}
{% endblock %}